{"version":3,"sources":["script.js"],"names":["jokesSection","document","getElementById","favSection","menuButtonOpen","menuButtonClose","controlSection","radioButtons","querySelectorAll","categoryButtons","searchInput","loadingText","fillFormWarn","ifEmptyText","overlay","categoryList","category","random","search","getCategories","ifEmptyFavSection","getLocalStorageData","savedFavJokes","localStorage","getItem","JSON","parse","forEach","joke","createJokeEl","fetch","then","resp","json","favJokes","display","error","style","p","createElement","innerHTML","concat","log","length","append","data","button","type","className","value","opositeButton","toggleFavSection","add","opacity","ontransitionend","e","setSearch","targetClass","target","classList","contains","selectCategory","showOptions","getJoke","currentActive","remove","_step","_iterator","_createForOfIteratorHelper","s","n","done","btn","optional","parentElement","getElementsByClassName","firstElementChild","focus","err","f","searchType","_step2","_iterator2","checked","url","getUrl","setTimeout","getData","input","urlList","result","hasOwnProperty","jokes","push","apply","_toConsumableArray","divToAppend","getElementsByTagName","content","cloneNode","insertBefore","clon","firstChild","mark","setAttribute","id","src","temp","link","href","textContent","updatedDate","date","Date","updated_at","Math","round","diffTime","text","currentDate","diffHours","categories","markJoke","markedHeartImg","favJoke","heartImg","filter","el","dataset","closest","setItem","stringify","init","addEventListener","key"],"mappings":"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","file":"script.min.js","sourcesContent":["const jokesSection = document.getElementById('jokes');\r\nconst favSection = document.getElementById('favourite');\r\n\r\nconst menuButtonOpen = document.getElementById('open');\r\nconst menuButtonClose = document.getElementById('close');\r\n\r\nconst controlSection = document.getElementById('control-menu');\r\nconst radioButtons = controlSection.querySelectorAll('input[type=\"radio\"]');\r\nconst categoryButtons = document.getElementById('buttons');\r\nconst searchInput = document.getElementById('search-input');\r\n\r\nconst loadingText = document.getElementById('loading');\r\nconst fillFormWarn = document.getElementById(\"fill-form-warn\");\r\nconst ifEmptyText = document.getElementById('emptyFavSection');\r\nconst overlay = document.getElementById(\"overlay\");\r\n\r\nconst urlList = {\r\n  categoryList: 'https://api.chucknorris.io/jokes/categories',\r\n  category: 'https://api.chucknorris.io/jokes/random?category=',\r\n  random: 'https://api.chucknorris.io/jokes/random',\r\n  search: 'https://api.chucknorris.io/jokes/search?query='\r\n}\r\n\r\nconst jokes = [];\r\nlet favJokes = [];\r\n\r\ninit(); //get jokes from storage and render\r\n\r\n// open or close favourite section\r\nmenuButtonOpen.addEventListener('click', toggleFavSection);\r\nmenuButtonClose.addEventListener('click', toggleFavSection);\r\noverlay.addEventListener('click', toggleFavSection);\r\n\r\n// search jokes\r\ncontrolSection.addEventListener('click', setSearch);\r\nsearchInput.addEventListener('keydown', (e) => {if (e.key === 'Enter') getJoke();});\r\n\r\n// like or dislike joke\r\njokesSection.addEventListener('click', markJoke);\r\nfavSection.addEventListener('click', markJoke);\r\n\r\n\r\n// FUNCTIONS\r\nfunction init() {\r\n  getLocalStorageData(); //get saved favourite jokes\r\n  getCategories(); //get categories and create buttons\r\n  ifEmptyFavSection(); //check if the favSection is empty\r\n}\r\n\r\n//get saved favourite jokes;\r\nfunction getLocalStorageData() {\r\n  const savedFavJokes = localStorage.getItem(\"favJokes\");\r\n\r\n  if (savedFavJokes !== null && savedFavJokes !== \"null\") {\r\n    favJokes = JSON.parse(savedFavJokes);\r\n    favJokes.forEach(joke => {createJokeEl(joke, favSection)});\r\n  }\r\n}\r\n\r\n//get categories and create buttons\r\nfunction getCategories() {\r\n  fetch(urlList.categoryList)\r\n    .then((resp) => resp.json())\r\n    .then((data) => {\r\n      createButtons(data);\r\n      loadingText.style.display = \"none\";\r\n    })\r\n\r\n    .catch(function(error) {\r\n      loadingText.style.display = \"none\";\r\n\r\n      let p = document.createElement('p');\r\n      p.innerHTML = `Can't receive categories (${error})`;\r\n      categoryButtons.append(p);\r\n\r\n      console.log(error); //eslint-disable-line\r\n    });\r\n}\r\n\r\n//check if the favSection is empty then show or hide information text\r\nfunction ifEmptyFavSection() {\r\n  if (favJokes.length !== 0) {\r\n    ifEmptyText.style.display = 'none';\r\n  } else {\r\n    ifEmptyText.style.display = 'block';\r\n  }\r\n}\r\n\r\n//create category buttons\r\nfunction createButtons(data) {\r\n  data.map(category => {\r\n    let button = document.createElement('button');\r\n\r\n    button.type = 'button';\r\n    button.innerHTML = category;\r\n    button.className = 'btn category';\r\n    button.value = category;\r\n\r\n    categoryButtons.append(button);\r\n  });\r\n}\r\n\r\n// open or close favourite section\r\nfunction toggleFavSection() {\r\n  let button = this;\r\n  let opositeButton;\r\n\r\n  // if click open button\r\n  if (button === menuButtonOpen) {\r\n    opositeButton = menuButtonClose;\r\n\r\n    favSection.classList.add('slide');\r\n    overlay.style.display = \"block\";\r\n\r\n  } else {\r\n    // if click close button\r\n    button = menuButtonClose; // in case when click on overlay\r\n    opositeButton = menuButtonOpen;\r\n\r\n    favSection.classList.remove('slide');\r\n    overlay.style.display = \"none\";\r\n  }\r\n\r\n  // hide menu button\r\n  button.style.opacity = \"0\";\r\n  // show opposite button after transition\r\n  favSection.ontransitionend = (e) => {\r\n    if (e.target === favSection) {\r\n      opositeButton.style.opacity = \"1\";\r\n    }\r\n  };\r\n}\r\n\r\n// when click on buttons inside control block\r\nfunction setSearch(e) {\r\n  const targetClass = e.target.classList;\r\n\r\n  //if click on button with a category\r\n  if (targetClass.contains('category')) {\r\n    selectCategory(e.target);\r\n\r\n  //if click on radio button (Random, From categories, Search)\r\n  } else if (targetClass.contains('opt-radio')) {\r\n    showOptions();\r\n  // if submit a form (Get a joke)\r\n  } else if (targetClass.contains('get-joke')) {\r\n    getJoke();\r\n  }\r\n}\r\n\r\n//if click on button with a category\r\nfunction selectCategory(target) {\r\n  //remove active status from current active button\r\n  let currentActive = target.parentElement.getElementsByClassName('active')[0];\r\n  if (currentActive) currentActive.classList.remove('active');\r\n  // make the button active\r\n  target.classList.add('active');\r\n}\r\n\r\n//if click on radio button (Random, From categories, Search)\r\nfunction showOptions() {\r\n  //find checked radio\r\n  for (let btn of radioButtons) {\r\n    const optional = btn.parentElement.getElementsByClassName('optional')[0];\r\n\r\n    //for From categories and Search\r\n    if (btn.checked && optional) {\r\n      optional.style.display = \"block\";\r\n      optional.firstElementChild.focus();\r\n\r\n    //for Random\r\n    } else if (!btn.checked && optional) {\r\n      optional.style.display = \"none\";\r\n    }\r\n  }\r\n}\r\n\r\n// if submit a form (Get a joke)\r\nfunction getJoke() {\r\n  let searchType;\r\n  //find checked radio\r\n  for (let btn of radioButtons) {\r\n    if (btn.checked) {\r\n      searchType = btn.value;\r\n    }\r\n  }\r\n\r\n  // get url for API\r\n  const url = getUrl(searchType);\r\n  // show popup \"Fill form\" if form is not full\r\n  if (!url) {\r\n    fillFormWarn.style.display = 'block';\r\n    setTimeout(function() {\r\n      fillFormWarn.style.display = 'none';\r\n    }, 1000);\r\n    return;\r\n  }\r\n\r\n  // receive data from API\r\n  getData(url);\r\n}\r\n\r\n// get url for API according to search type\r\nfunction getUrl(type) {\r\n  let url;\r\n  let input;\r\n\r\n  switch (type) {\r\n    case \"random\":\r\n      url = urlList.random;\r\n      break;\r\n\r\n    case \"category\":\r\n      input = document.getElementsByClassName('active')[0];\r\n\r\n      if (!input) return; //if category is not choosen return\r\n\r\n      url = urlList.category + input.value;\r\n      break;\r\n\r\n    case \"search\":\r\n      input = document.getElementsByClassName('search')[0];\r\n\r\n      if (!input.value) return; //if search input is empty\r\n      url = urlList.search + input.value;\r\n      break;\r\n    default: //if radio button is not choosen\r\n      return;\r\n  }\r\n  return url;\r\n}\r\n\r\n// receive data from API\r\nfunction getData(url) {\r\n\r\n  fetch(url)\r\n    .then((resp) => resp.json())\r\n    .then((data) => {\r\n      let result = [];\r\n\r\n      // search with free text has result obj in receiving data\r\n      if (data.hasOwnProperty(\"result\")) {\r\n        result = data.result;\r\n      } else {\r\n        result = [data];\r\n      }\r\n      //add data to joke obj\r\n      jokes.push(...result);\r\n\r\n      // render new jokes\r\n      result.forEach(joke => {createJokeEl(joke, jokesSection)});\r\n    })\r\n    .catch(function(error) {\r\n      console.log(error); //eslint-disable-line\r\n    });\r\n}\r\n\r\n// create joke and render\r\nfunction createJokeEl(data, divToAppend) {\r\n  // get template from DOM and clone it\r\n  const temp = document.getElementsByTagName('template')[0];\r\n  const clon = temp.content.cloneNode(true);\r\n\r\n  // append clone to DOM\r\n  divToAppend.insertBefore(clon, divToAppend.firstChild)\r\n\r\n  const joke = divToAppend.firstElementChild;\r\n\r\n  // edit joke according to received data\r\n  const mark = joke.getElementsByClassName('save')[0];\r\n  mark.setAttribute('data-id', data.id);\r\n\r\n  // change heart image\r\n  // if joke is added to favourite section\r\n  if (divToAppend.classList.contains(\"favourite\")) {\r\n    mark.src = \"./images/heart-fill.svg\";\r\n\r\n    // if joke is added to joke section\r\n  } else {\r\n    mark.src = \"./images/heart.svg\";\r\n  }\r\n\r\n  const link = joke.getElementsByClassName('joke-link')[0];\r\n  link.href = data.url;\r\n  link.textContent = data.id;\r\n\r\n  const text = joke.getElementsByClassName('text')[0];\r\n  text.textContent = data.value;\r\n\r\n  // calculate difference between current and a joke updated date\r\n  const date = joke.getElementsByClassName('hours')[0];\r\n\r\n  const currentDate = new Date();\r\n  const updatedDate = new Date(data.updated_at);\r\n\r\n  const diffTime = currentDate - updatedDate;\r\n  const diffHours = Math.round(diffTime / (1000 * 60 * 60));\r\n\r\n  date.textContent = diffHours + \" hours ago\";\r\n\r\n  // add button with category type if exist\r\n  if (data.categories.length) {\r\n    let button = document.createElement('button');\r\n    button.type = 'button';\r\n    button.innerHTML = data.categories[0];\r\n    button.className = 'btn';\r\n    joke.getElementsByClassName('footer')[0].append(button);\r\n  }\r\n\r\n  return joke;\r\n}\r\n\r\n// like or dislike the joke\r\nfunction markJoke(e) {\r\n  const heartImg = e.target;\r\n\r\n  if (heartImg.className !== 'save') return;\r\n\r\n  let joke;\r\n\r\n  //if remove (dislike)\r\n  if (heartImg.src.includes(\"fill.svg\")) {\r\n    heartImg.src = \"./images/heart.svg\";\r\n\r\n    // update favJoke obj\r\n    favJokes = favJokes.filter(el => {\r\n      return el.id !== heartImg.dataset.id;\r\n    });\r\n\r\n    let favJoke;\r\n    // remove joke from DOM\r\n    // if dislike in a favourite section\r\n    if (e.target.closest(\".favourite\")) {\r\n      favJoke = heartImg.closest(\".joke\");\r\n\r\n      // dislike same joke from a joke section\r\n      // find all jokes in jokesSection and convert HTMLCollesction to array\r\n      const heartArr =[...jokesSection.getElementsByClassName('save')];\r\n\r\n      const markedHeartImg = heartArr.filter(el => {\r\n        return el.dataset.id === heartImg.dataset.id;\r\n      });\r\n\r\n      // if fav joke is not from local storage - dislike it from a joke section\r\n      if (markedHeartImg[0]) {\r\n        markedHeartImg[0].src = \"./images/heart.svg\";\r\n      }\r\n\r\n    // if dislike in a joke section\r\n    } else {\r\n      // find all jokes in favSection and convert HTMLCollesction to array\r\n      const heartArr =[...favSection.getElementsByClassName('save')];\r\n\r\n      const markedHeartImg = heartArr.filter(el => {\r\n        return el.dataset.id === heartImg.dataset.id\r\n      });\r\n\r\n      favJoke = markedHeartImg[0].closest(\".joke\");\r\n    }\r\n\r\n    favJoke.remove();\r\n  // if add to fav (like)\r\n  } else {\r\n    heartImg.src = \"./images/heart-fill.svg\";\r\n    // update favJoke obj\r\n    joke = jokes.filter(el => {\r\n      return el.id === heartImg.dataset.id;\r\n    });\r\n\r\n    favJokes.push(...joke);\r\n\r\n    //add it to DOM\r\n    createJokeEl(...joke, favSection);\r\n  }\r\n\r\n  // if there are no joke - show information text\r\n  ifEmptyFavSection();\r\n  // add favourite joke to local storage\r\n  localStorage.setItem(\"favJokes\", JSON.stringify(favJokes));\r\n}\r\n"]}